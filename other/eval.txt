#########################
#    O B J E C T I F    #
######################################################################################
# >>	nginx			80/443		serveur (SSH)
#   	ftps			21			echange de fichiers (SSL)
# >>	wordpress		5050		creation de sites et users
# >>	phpmyadmin		5000		permet d'accéder a la base de données
# >>	mysql			3306	gere la base de données
# >>	grafana			3000		dashboards des services tournant sur le serveur
# >>	influxdb		8086 ?		gere la base de données pour grafana
######################################################################################
____________________________________________
											\
RESTE A FAIRE :								 \
Creer + de users sur wordpress                \
Liveness Probes                               /
Adapter le tout sur Linux/VM                 /
____________________________________________/
+ CLEAN-UP ALL MY SHIT...
Dashboard FTPS a actualiser

VM PROBLEMS :
* Pas de commande 'minikube ip' sur Linux donc impossible de servir les requetes
>> il est fort probable que tous les autres soucis découlent de celui ci
* Grafana inaccessible :
netstat > n'ecoute que les IPv6 sur le port 3000, c'est normal ??
* Nginx ne se lance pas :
cf toutes les merdes avec rc-service mes couilles....

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
COMMANDES UTILES :
//////////////////////////////////////////////////////////////////////////////////////////////
ftp://FTP_Username:FTP_Password@HOST_IP
ftp://ftp@HOST_IP
lsof -nP -iTCP:$PORT | grep LISTEN
kubectl cluster-info
kubectl get -		list resources							Les '-' peuvent etre remplacés par
kubectl describe -	show detailed information				services
kubectl logs -		print logs from a container in a pod	pods
kubectl exec -		execute a cmd on a container in a pod	deployment
					ex : kubectl exec nginx -- bash			namespaces
kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
					alternative au fichier de config .yaml ?
minikube ip			(192.168.99.104)
kubectl config set-context $(kubectl config current-context) --namespace=metallb-system
					change le contexte pour rester dans le namespace en question
minikube ssh		rentrer dans le cluster Kubernetes
docker ps (-a)		voir les containers la où t'es
docker exec -it <CONTAINER> sh
					-> rentrer dans un container
screen -ls          liste les sessions screen
screen -X -S <session_number> quit
					kill la session donnée
screen -ls | grep Detached | cut -d. -f1 | awk '{print $1}' | xargs kill
					kill toutes les sessions Detached
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
sudo modprobe -r rtl8723de && sudo modprobe rtl8723de ant_sel=2
//////////////////////////////////////////////////////////////////////////////////////////////

		########
		# FTPS #
		########

Vsftpd contient :
* etc/vsftpd/vsftpd.conf
* /usr/sbin/vsftpd
* /etc/init.d/vsftpd
* /etc/conf.d/vsftpd

Tuto : install ftps sur linux
1) create user ftpuser with password
2) install vsftpd
3) mkdir /opt/ftp && usermod -d /opt/ftp ftp
4) /etc/init.d/vsftpd restart
5) mkdir /opt/ftp/<ROOT_USER>
6) edit la conf
7) restart again

Ce que j'ai bougé qui pourrait faire merder :
- deplacement exec telegraf et vsftpd dans script
- allow_writeable_chroot=YES
- port range dans yaml + vsftpd.conf

FINALLY WORKING !!!!!! with config as follows :
allow_writeable_chroot=YES
Port-range
chmod 6777 home/userftps/ftp (pas sur que ca ait une influence)

Permissions la fois ou ça a marché (chmod x777):
drwsr-xr-x    1 nobody   nogroup       4096 Aug 12 20:47 home/userftps/ftp/
drwxr-sr-x    1 userftps userftps      4096 Aug 12 19:42 home/userftps/
-rwsr-xr-x    1 root     root            44 Aug 12 19:42 home/userftps/ftp/boss.txt
-rwsr-xr-x    1 userftps nogroup       2585 Aug 12 20:47 home/userftps/ftp/correction.c     ajout
-rwxr-xr-x    1 userftps nogroup       2089 Aug 12 20:51 home/userftps/ftp/subject.en.txt   ajout

		############
		# INFLUXDB #
		############

InfluxDB contient :
* un .conf (/etc/influxdb.conf)
* des executables dans bin :
	influx_inspect
	influx_stress
	influx_tools
	influx_tsm
* un executable dans sbin : (daemon ??)
	influxd

		############
		# GRAFANA  #
		############

Grafana contient (en theorie) :
* un .ini (/etc/grafana.ini)
* des executables :
	/usr/bin/grafana-cli
	/usr/sbin/grafana-server
* des exemples de conf (/usr/share/grafana/conf)

		############
		#   MYSQL  #
		############

# /usr/bin/mysql_install_db --user=mysql
Installing MariaDB/MySQL system tables in './data' ...
OK
To start mysqld at boot time you have to copy
support-files/mysql.server to the right place for your system
Two all-privilege accounts were created.
One is root@localhost, it has no password, but you need to
be system 'root' user to connect. Use, for example, sudo mysql
The second is mysql@localhost, it has no password either, but
you need to be the system 'mysql' user to connect.
After connecting you can set the password, if you would need to be
able to connect as any of these users with a password and without sudo
You can start the MariaDB daemon with:
cd '/usr' ; /usr/bin/mysqld_safe --datadir='./data'
You can test the MariaDB daemon with mysql-test-run.pl
cd '/usr/mysql-test' ; perl mysql-test-run.pl

Tests docker pour MySQL/phpmyadmin
NB : ca marche pareil avec -it au lieu de -d mais ca bloque un terminal par image
docker pull mysql:latest
docker run --name mysql-db -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mukit mysql:latest
docker pull phpmyadmin/phpmyadmin:latest
docker run --name my-own-phpmyadmin -d --link mysql-db:db -p 8081:80 phpmyadmin/phpmyadmin
>> ACCESS PHPMYADMIN @ http://localhost:8081